# source: https://eu1.prisma.sh/public-junglepig-932/digital-bookshelf/dev
# timestamp: Thu Oct 04 2018 00:08:24 GMT-0400 (EDT)

type AggregateBook {
  count: Int!
}

type AggregateBookReview {
  count: Int!
}

type AggregateBookshelf {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserBookProgress {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  isbn: String!
  title: String!
  author: String!
  description: String!
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  isbn: String!
  title: String!
  author: String!
  description: String!
}

input BookCreateManyInput {
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateOneInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  isbn_ASC
  isbn_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreviousValues {
  id: ID!
  isbn: String!
  title: String!
  author: String!
  description: String!
}

type BookReview implements Node {
  id: ID!
  author: User!
  book: Book!
  review: String!
}

"""A connection to a list of items."""
type BookReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookReviewEdge]!
  aggregate: AggregateBookReview!
}

input BookReviewCreateInput {
  review: String!
  author: UserCreateOneInput!
  book: BookCreateOneInput!
}

"""An edge in a connection."""
type BookReviewEdge {
  """The item at the end of the edge."""
  node: BookReview!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookReviewOrderByInput {
  id_ASC
  id_DESC
  review_ASC
  review_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookReviewPreviousValues {
  id: ID!
  review: String!
}

type BookReviewSubscriptionPayload {
  mutation: MutationType!
  node: BookReview
  updatedFields: [String!]
  previousValues: BookReviewPreviousValues
}

input BookReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookReviewWhereInput
}

input BookReviewUpdateInput {
  review: String
  author: UserUpdateOneRequiredInput
  book: BookUpdateOneRequiredInput
}

input BookReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [BookReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  review: String

  """All values that are not equal to given value."""
  review_not: String

  """All values that are contained in given list."""
  review_in: [String!]

  """All values that are not contained in given list."""
  review_not_in: [String!]

  """All values less than the given value."""
  review_lt: String

  """All values less than or equal the given value."""
  review_lte: String

  """All values greater than the given value."""
  review_gt: String

  """All values greater than or equal the given value."""
  review_gte: String

  """All values containing the given string."""
  review_contains: String

  """All values not containing the given string."""
  review_not_contains: String

  """All values starting with the given string."""
  review_starts_with: String

  """All values not starting with the given string."""
  review_not_starts_with: String

  """All values ending with the given string."""
  review_ends_with: String

  """All values not ending with the given string."""
  review_not_ends_with: String
  author: UserWhereInput
  book: BookWhereInput
}

input BookReviewWhereUniqueInput {
  id: ID
}

type Bookshelf implements Node {
  id: ID!
  owner: User!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

"""A connection to a list of items."""
type BookshelfConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookshelfEdge]!
  aggregate: AggregateBookshelf!
}

input BookshelfCreateInput {
  owner: UserCreateOneInput!
  books: BookCreateManyInput
}

"""An edge in a connection."""
type BookshelfEdge {
  """The item at the end of the edge."""
  node: Bookshelf!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookshelfOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookshelfPreviousValues {
  id: ID!
}

type BookshelfSubscriptionPayload {
  mutation: MutationType!
  node: Bookshelf
  updatedFields: [String!]
  previousValues: BookshelfPreviousValues
}

input BookshelfSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookshelfSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookshelfSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookshelfSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookshelfWhereInput
}

input BookshelfUpdateInput {
  owner: UserUpdateOneRequiredInput
  books: BookUpdateManyInput
}

input BookshelfWhereInput {
  """Logical AND on all given filters."""
  AND: [BookshelfWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookshelfWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookshelfWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  owner: UserWhereInput
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input BookshelfWhereUniqueInput {
  id: ID
}

enum BookStatus {
  UNKNOWN
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateDataInput {
  isbn: String
  title: String
  author: String
  description: String
}

input BookUpdateInput {
  isbn: String
  title: String
  author: String
  description: String
}

input BookUpdateManyInput {
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueNestedInput!]
  upsert: [BookUpsertWithWhereUniqueNestedInput!]
}

input BookUpdateOneRequiredInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
  update: BookUpdateDataInput
  upsert: BookUpsertNestedInput
}

input BookUpdateWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput!
  data: BookUpdateDataInput!
}

input BookUpsertNestedInput {
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookUpsertWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput!
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isbn: String

  """All values that are not equal to given value."""
  isbn_not: String

  """All values that are contained in given list."""
  isbn_in: [String!]

  """All values that are not contained in given list."""
  isbn_not_in: [String!]

  """All values less than the given value."""
  isbn_lt: String

  """All values less than or equal the given value."""
  isbn_lte: String

  """All values greater than the given value."""
  isbn_gt: String

  """All values greater than or equal the given value."""
  isbn_gte: String

  """All values containing the given string."""
  isbn_contains: String

  """All values not containing the given string."""
  isbn_not_contains: String

  """All values starting with the given string."""
  isbn_starts_with: String

  """All values not starting with the given string."""
  isbn_not_starts_with: String

  """All values ending with the given string."""
  isbn_ends_with: String

  """All values not ending with the given string."""
  isbn_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input BookWhereUniqueInput {
  id: ID
  isbn: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBookshelf(data: BookshelfCreateInput!): Bookshelf!
  createUserBookProgress(data: UserBookProgressCreateInput!): UserBookProgress!
  createBookReview(data: BookReviewCreateInput!): BookReview!
  createUser(data: UserCreateInput!): User!
  createBook(data: BookCreateInput!): Book!
  updateBookshelf(data: BookshelfUpdateInput!, where: BookshelfWhereUniqueInput!): Bookshelf
  updateUserBookProgress(data: UserBookProgressUpdateInput!, where: UserBookProgressWhereUniqueInput!): UserBookProgress
  updateBookReview(data: BookReviewUpdateInput!, where: BookReviewWhereUniqueInput!): BookReview
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  deleteBookshelf(where: BookshelfWhereUniqueInput!): Bookshelf
  deleteUserBookProgress(where: UserBookProgressWhereUniqueInput!): UserBookProgress
  deleteBookReview(where: BookReviewWhereUniqueInput!): BookReview
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBook(where: BookWhereUniqueInput!): Book
  upsertBookshelf(where: BookshelfWhereUniqueInput!, create: BookshelfCreateInput!, update: BookshelfUpdateInput!): Bookshelf!
  upsertUserBookProgress(where: UserBookProgressWhereUniqueInput!, create: UserBookProgressCreateInput!, update: UserBookProgressUpdateInput!): UserBookProgress!
  upsertBookReview(where: BookReviewWhereUniqueInput!, create: BookReviewCreateInput!, update: BookReviewUpdateInput!): BookReview!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  updateManyBookshelves(data: BookshelfUpdateInput!, where: BookshelfWhereInput): BatchPayload!
  updateManyUserBookProgresses(data: UserBookProgressUpdateInput!, where: UserBookProgressWhereInput): BatchPayload!
  updateManyBookReviews(data: BookReviewUpdateInput!, where: BookReviewWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyBooks(data: BookUpdateInput!, where: BookWhereInput): BatchPayload!
  deleteManyBookshelves(where: BookshelfWhereInput): BatchPayload!
  deleteManyUserBookProgresses(where: UserBookProgressWhereInput): BatchPayload!
  deleteManyBookReviews(where: BookReviewWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  bookshelves(where: BookshelfWhereInput, orderBy: BookshelfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bookshelf]!
  userBookProgresses(where: UserBookProgressWhereInput, orderBy: UserBookProgressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserBookProgress]!
  bookReviews(where: BookReviewWhereInput, orderBy: BookReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookReview]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  bookshelf(where: BookshelfWhereUniqueInput!): Bookshelf
  userBookProgress(where: UserBookProgressWhereUniqueInput!): UserBookProgress
  bookReview(where: BookReviewWhereUniqueInput!): BookReview
  user(where: UserWhereUniqueInput!): User
  book(where: BookWhereUniqueInput!): Book
  bookshelvesConnection(where: BookshelfWhereInput, orderBy: BookshelfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookshelfConnection!
  userBookProgressesConnection(where: UserBookProgressWhereInput, orderBy: UserBookProgressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserBookProgressConnection!
  bookReviewsConnection(where: BookReviewWhereInput, orderBy: BookReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookReviewConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  bookshelf(where: BookshelfSubscriptionWhereInput): BookshelfSubscriptionPayload
  userBookProgress(where: UserBookProgressSubscriptionWhereInput): UserBookProgressSubscriptionPayload
  bookReview(where: BookReviewSubscriptionWhereInput): BookReviewSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  confirmationCode: String!
}

type UserBookProgress implements Node {
  id: ID!
  user: User!
  book: Book!
  status: BookStatus!
}

"""A connection to a list of items."""
type UserBookProgressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserBookProgressEdge]!
  aggregate: AggregateUserBookProgress!
}

input UserBookProgressCreateInput {
  status: BookStatus!
  user: UserCreateOneInput!
  book: BookCreateOneInput!
}

"""An edge in a connection."""
type UserBookProgressEdge {
  """The item at the end of the edge."""
  node: UserBookProgress!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserBookProgressOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserBookProgressPreviousValues {
  id: ID!
  status: BookStatus!
}

type UserBookProgressSubscriptionPayload {
  mutation: MutationType!
  node: UserBookProgress
  updatedFields: [String!]
  previousValues: UserBookProgressPreviousValues
}

input UserBookProgressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserBookProgressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserBookProgressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserBookProgressSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserBookProgressWhereInput
}

input UserBookProgressUpdateInput {
  status: BookStatus
  user: UserUpdateOneRequiredInput
  book: BookUpdateOneRequiredInput
}

input UserBookProgressWhereInput {
  """Logical AND on all given filters."""
  AND: [UserBookProgressWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserBookProgressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserBookProgressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: BookStatus

  """All values that are not equal to given value."""
  status_not: BookStatus

  """All values that are contained in given list."""
  status_in: [BookStatus!]

  """All values that are not contained in given list."""
  status_not_in: [BookStatus!]
  user: UserWhereInput
  book: BookWhereInput
}

input UserBookProgressWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  confirmationCode: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  confirmationCode_ASC
  confirmationCode_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  confirmationCode: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  confirmationCode: String
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  confirmationCode: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  confirmationCode: String

  """All values that are not equal to given value."""
  confirmationCode_not: String

  """All values that are contained in given list."""
  confirmationCode_in: [String!]

  """All values that are not contained in given list."""
  confirmationCode_not_in: [String!]

  """All values less than the given value."""
  confirmationCode_lt: String

  """All values less than or equal the given value."""
  confirmationCode_lte: String

  """All values greater than the given value."""
  confirmationCode_gt: String

  """All values greater than or equal the given value."""
  confirmationCode_gte: String

  """All values containing the given string."""
  confirmationCode_contains: String

  """All values not containing the given string."""
  confirmationCode_not_contains: String

  """All values starting with the given string."""
  confirmationCode_starts_with: String

  """All values not starting with the given string."""
  confirmationCode_not_starts_with: String

  """All values ending with the given string."""
  confirmationCode_ends_with: String

  """All values not ending with the given string."""
  confirmationCode_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
